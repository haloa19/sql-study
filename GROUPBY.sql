/*
 * GROUP BY, HAVING 절
 * */
-- 1. 집계함수
-- 여러 행을 그룹으로 묶은 후, 그 그룹당 1개의 결과를 반환해주는 함수 (테이블 전체가 1개의 그룹이 될 수도 있음)
-- 사용가능 절: SELECT, HAVING, ORDER BY
-- 조건: PLAYER테이블의 전체 행 수, HEIGHT가 NULL이 아닌 행 수, 키의 합계, 키의 평균, 가장 큰 키, 가장 작은 키
SELECT COUNT(*), -- 전체 컬럼을 대상으로 -> 결국 1행을 의미 -> 모든 컬럼이 NULL인 행은 없기 때문에 
	   COUNT(HEIGHT), -- HEIGHT가 존재하는 행만 카운트 
	   SUM(HEIGHT), 
	   AVG(HEIGHT), 
	   MAX(HEIGHT), 
	   MIN(HEIGHT) 
FROM PLAYER;


-- 2. GROUP BY 절
-- 주의: WHERE 절에는 사용 불가 -> GROUP BY 보다 먼저 실행되기 때문에!!
-- 조건: 포지션별 선수들의 키의 평균 및 정보를 구해보자
-- 1) SELECT 절의 별칭은 사용 불가 -> GROUP BY가 먼저 실행되고 SELECT 실행하기 때문에
SELECT POSITION '포지션', AVG(HEIGHT)
FROM PLAYER
GROUP BY POSITION 포지션;
-- 2) 제대로된 쿼리
SELECT POSITION, 
	   COUNT(*) AS '인원수', 
	   COUNT(HEIGHT) AS '키 대상', 
	   MAX(HEIGHT) AS '최대키', 
	   MIN(HEIGHT) AS '최소키', 
	   ROUND(AVG(HEIGHT)) AS '평균키' 
FROM PLAYER
GROUP BY POSITION
ORDER BY POSITION;


-- 3. HAVING 절
-- 그룹을 나타내는 결과 집합의 행에 조건이 적용
SELECT POSITION, AVG(HEIGHT) AS 평균키, AVG(WEIGHT)
FROM PLAYER
GROUP BY POSITION
HAVING 평균키 > 170 AND AVG(WEIGHT) > 65;
-- 조건: 소속팀 K02, K09의 인원수
-- 방법1: WHERE절에 조건걸기
SELECT TEAM_ID, COUNT(*)
FROM PLAYER
WHERE TEAM_ID IN ('K02', 'K09')
GROUP BY TEAM_ID;
-- 방법2: HAVING절에 조건걸기 -> 집계함수에 대한 조건이 아니면 비효율적
SELECT TEAM_ID, COUNT(*) 
FROM PLAYER
GROUP BY TEAM_ID
HAVING TEAM_ID IN ('K02', 'K09');


-- 4. CASE 표현을 활용한 월별 데이터 집계
-- 참고: SQLite에서 실행중이므로 월 추출 함수를 STRFTIME사용
--      ORACLE에서는 EXTRACT(), SQL Server에서는 MONTH()
-- 1) 개별 데이터 확인
SELECT EMPNO, ENAME, DEPTNO, SAL, STRFTIME('%m', HIREDATE) AS 입사월
FROM EMP;
-- 2) 월별 데이터 구분
SELECT EMPNO, 
	   ENAME, 
	   DEPTNO, 
	   STRFTIME('%m', HIREDATE) AS '입사월',
	   CASE T.HIREMONTH WHEN '01' THEN SAL END AS M01,
	   CASE T.HIREMONTH WHEN '02' THEN SAL END AS M02,
	   CASE T.HIREMONTH WHEN '03' THEN SAL END AS M03,
       CASE T.HIREMONTH WHEN '04' THEN SAL END AS M04,
	   CASE T.HIREMONTH WHEN '05' THEN SAL END AS M05,
	   CASE T.HIREMONTH WHEN '06' THEN SAL END AS M06,
	   CASE T.HIREMONTH WHEN '07' THEN SAL END AS M07,
	   CASE T.HIREMONTH WHEN '08' THEN SAL END AS M08,
	   CASE T.HIREMONTH WHEN '09' THEN SAL END AS M09,
	   CASE T.HIREMONTH WHEN '10' THEN SAL END AS M10,
	   CASE T.HIREMONTH WHEN '11' THEN SAL END AS M11,
	   CASE T.HIREMONTH WHEN '12' THEN SAL END AS M12
FROM (
	SELECT EMPNO, 
		   ENAME, 
		   DEPTNO, 
		   SAL, 
		   HIREDATE,
		   STRFTIME('%m', HIREDATE) AS HIREMONTH
	FROM EMP
)T;
-- 3) 부서별 데이터 집계
-- CASE문 대신 ORACLE의 DECODE함수로도 같은 결과
SELECT DEPTNO, 
	   AVG(CASE T.HIREMONTH WHEN '01' THEN SAL END) AS M1,
	   AVG(CASE T.HIREMONTH WHEN '02' THEN SAL END) AS M2,
	   AVG(CASE T.HIREMONTH WHEN '03' THEN SAL END) AS M3,
       AVG(CASE T.HIREMONTH WHEN '04' THEN SAL END) AS M4,
	   AVG(CASE T.HIREMONTH WHEN '05' THEN SAL END) AS M5,
	   AVG(CASE T.HIREMONTH WHEN '06' THEN SAL END) AS M6,
	   AVG(CASE T.HIREMONTH WHEN '07' THEN SAL END) AS M7,
	   AVG(CASE T.HIREMONTH WHEN '08' THEN SAL END) AS M8,
	   AVG(CASE T.HIREMONTH WHEN '09' THEN SAL END) AS M9,
	   AVG(CASE T.HIREMONTH WHEN '10' THEN SAL END) AS M10,
	   AVG(CASE T.HIREMONTH WHEN '11' THEN SAL END) AS M11,
	   AVG(CASE T.HIREMONTH WHEN '12' THEN SAL END) AS M12
FROM (
	SELECT DEPTNO, 
		   SAL, 
		   HIREDATE,
		   STRFTIME('%m', HIREDATE) AS HIREMONTH
	FROM EMP
)T
GROUP BY DEPTNO;


-- 5. 집계 함수와 NULL
-- 다중행 함수에서는 NULL을 자동으로 제외하고 연산수행!!
-- 따라서, 굳이 NULL값을 0으로 바꾸기 위해 함수를 사용하여 자원을 낭비할 필요가 없음
-- 조건: 팀별, 포지션별 FW, MF, DF, GK 표지션의 인원수와 팀별 전체 인원수 구하기
SELECT TEAM_ID, 
	   ISNULL(SUM(CASE WHEN POSITION 'FW' THEN 1 END), 0), -- ELSE 0 을 할필요 없음
	   ISNULL(SUM(CASE WHEN POSITION 'MF' THEN 1 END), 0),
	   ISNULL(SUM(CASE WHEN POSITION 'DF' THEN 1 END), 0),
	   ISNULL(SUM(CASE WHEN POSITION 'GK' THEN 1 END), 0)
FROM PLAYER
GROUP BY TEAM_ID;